public class P01 {
    public static void main(String[] args) {
        // a
        int a = 1234; //0000 0000 0000 0000 0000 0100 1101 0010
        int b = 5000; //0000 0000 0000 0000 0001 0011 1000 1000
        int resultAND = a & b; //0000 0000 0000 0000 0000 0000 1000 0000 = 128
        int resultOR = a | b; //0000 0000 0000 0000 0001 0111 1101 1010 = 6106
        System.out.println("AND " + resultAND);
        System.out.println("OR " + resultOR);
        int tmp = a;//tmp = 1234
        a = b; //a = 5000
        b = tmp; //b = 1234
        System.out.println(a); //a = 5000
        System.out.println(b); // b = 1234
        a = a ^ b; //5000 xor 1234 = 0001 0011 1000 1000 xor 0000 0100 1101 0010 = 0001 0111 0101 1010 (5978)
        b = a ^ b; //5978 xor 1234 = 0001 0111 0101 1010 xor 0000 0100 1101 0010 = 0001 0011 1000 1000(5000)
        a = a ^ b; //5978 xor 5000 = 0001 0111 0101 1010 xor 0001 0011 1000 1000 = 0000 0100 1101 0010(1234)
        System.out.println(a); //1234
        System.out.println(b); //5000
        a = a + b; //6234
        b = a - b; //1234
        a = a - b; //5000
        System.out.println(a); //5000
        System.out.println(b); //1234

        // b
        short n = (short) -171; //1111 1111 0101 0101
        System.out.println(n >> 4); //1111 1111 1111 0101 = -11
        System.out.println(n >>> 3); //0001 1111 1111 1111 1111 1111 1110 1010 = 536870910
        byte a = (byte) n; //0101 0101 = 85
        byte b = (byte) 44; //0010 1100 = 44
        byte c = (byte) (a & -a); //0101 0101 & 1010 1011 = 0000 0001 = 1
        byte d = (byte) (b & -b); // 0010 1100 & 1101 0100 = 0000 0100 = 4
        byte e = (byte) (a & (a - 1)); //0101 0101 & 0101 0100(84) = 0101 0100 = 84
        byte f = (byte) (b & (b - 1)); //0010 1100 & 0010 1011 = 0010 1000 = 40

        // c
        System.out.println(~35 + 1); //(~35) = -36
                                    //-36 + 1 = -35

        // d
        int a = 1; //0000 0000 0000 0000 0000 0000 0000 0001
        int b = -128; //1111 1111 1111 1111 1111 1111 1000 0000
        a <<= 1; //0000 0000  0000 0000  0000 0000  0000 0010 = 2
        b >>= a; //1111 1111 1111 1111 1111 1111 1110 0000 = -32
    }
}